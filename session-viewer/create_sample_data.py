#!/usr/bin/env python3
"""
Sample Data Generator for Cybersecurity Agent Session Viewer
Creates realistic cybersecurity workflow sessions with various file types
"""

import json
import os
import random
from datetime import datetime, timedelta
import sqlite3

# Sample cybersecurity session types
SESSION_TYPES = [
    "threat_analysis",
    "incident_response", 
    "vulnerability_assessment",
    "forensic_investigation",
    "penetration_testing",
    "security_audit",
    "malware_analysis",
    "network_monitoring"
]

# Sample file types and their characteristics
FILE_TYPES = {
    "image": ["screenshot", "network_diagram", "log_analysis", "threat_visualization"],
    "document": ["report", "analysis", "procedure", "checklist", "timeline"],
    "data": ["log", "csv", "json", "xml", "yaml"],
    "database": ["sqlite", "postgresql", "mongodb", "elasticsearch"],
    "archive": ["zip", "tar", "gz", "7z", "rar"]
}

# Sample cybersecurity tools and outputs
TOOLS = [
    "nmap", "wireshark", "metasploit", "burp_suite", "nessus", 
    "openvas", "volatility", "autopsy", "sleuth_kit", "tcpdump",
    "snort", "suricata", "osquery", "crowdstrike", "carbon_black"
]

def generate_sample_file(file_type, session_id, file_index):
    """Generate a realistic sample file entry"""
    
    # File size ranges (in bytes)
    size_ranges = {
        "image": (50000, 2000000),      # 50KB - 2MB
        "document": (10000, 500000),    # 10KB - 500KB
        "data": (5000, 1000000),        # 5KB - 1MB
        "database": (100000, 5000000),  # 100KB - 5MB
        "archive": (20000, 10000000)    # 20KB - 10MB
    }
    
    # Generate realistic file path
    if file_type == "image":
        path = f"sessions/{session_id}/evidence/screenshot_{file_index:03d}.png"
        name = f"screenshot_{file_index:03d}.png"
    elif file_type == "document":
        path = f"sessions/{session_id}/reports/analysis_report_{file_index:03d}.md"
        name = f"analysis_report_{file_index:03d}.md"
    elif file_type == "data":
        path = f"sessions/{session_id}/logs/security_log_{file_index:03d}.json"
        name = f"security_log_{file_index:03d}.json"
    elif file_type == "database":
        path = f"sessions/{session_id}/data/evidence_{file_index:03d}.db"
        name = f"evidence_{file_index:03d}.db"
    elif file_type == "archive":
        path = f"sessions/{session_id}/archives/evidence_package_{file_index:03d}.zip"
        name = f"evidence_package_{file_index:03d}.zip"
    
    # Generate file size
    min_size, max_size = size_ranges[file_type]
    size = random.randint(min_size, max_size)
    
    # Generate timestamps
    created = datetime.now() - timedelta(hours=random.randint(1, 48))
    modified = created + timedelta(minutes=random.randint(5, 120))
    
    return {
        "id": f"file_{session_id}_{file_index}",
        "name": name,
        "path": path,
        "type": file_type,
        "size": size,
        "created": created.isoformat(),
        "modified": modified.isoformat(),
        "metadata": {
            "tool": random.choice(TOOLS),
            "description": f"Generated by {random.choice(TOOLS)} during {random.choice(SESSION_TYPES)}",
            "tags": [file_type, random.choice(SESSION_TYPES), "sample_data"]
        }
    }

def generate_sample_session(session_id):
    """Generate a realistic cybersecurity workflow session"""
    
    session_type = random.choice(SESSION_TYPES)
    
    # Generate session metadata
    start_time = datetime.now() - timedelta(hours=random.randint(2, 72))
    end_time = start_time + timedelta(hours=random.randint(1, 8))
    
    # Generate files for this session
    num_files = random.randint(3, 12)
    files = []
    
    for i in range(num_files):
        file_type = random.choice(list(FILE_TYPES.keys()))
        file_data = generate_sample_file(file_type, session_id, i)
        files.append(file_data)
    
    # Calculate session statistics
    total_size = sum(f["size"] for f in files)
    file_count = len(files)
    
    # Generate session description
    descriptions = {
        "threat_analysis": "Comprehensive analysis of potential security threats and vulnerabilities",
        "incident_response": "Response to security incident with evidence collection and analysis",
        "vulnerability_assessment": "Assessment of system vulnerabilities and risk analysis",
        "forensic_investigation": "Digital forensics investigation with evidence preservation",
        "penetration_testing": "Authorized penetration testing with detailed findings",
        "security_audit": "Security audit with compliance checking and recommendations",
        "malware_analysis": "Malware analysis and reverse engineering investigation",
        "network_monitoring": "Network security monitoring and threat detection"
    }
    
    return {
        "id": f"session_{session_id}",
        "name": f"{session_type.replace('_', ' ').title()} Session {session_id}",
        "type": session_type,
        "description": descriptions[session_type],
        "status": random.choice(["completed", "in_progress", "pending_review"]),
        "startTime": start_time.isoformat(),
        "endTime": end_time.isoformat(),
        "created": start_time.isoformat(),
        "updated": end_time.isoformat(),
        "fileCount": file_count,
        "totalSize": total_size,
        "files": files,
        "metadata": {
            "analyst": f"Security Professional {random.randint(1, 5)}",
            "priority": random.choice(["low", "medium", "high", "critical"]),
            "tags": [session_type, "cybersecurity", "workflow", "sample"],
            "tools_used": random.sample(TOOLS, random.randint(2, 5))
        }
    }

def create_sample_database():
    """Create SQLite database with sample sessions"""
    
    # Create database directory if it doesn't exist
    os.makedirs("data", exist_ok=True)
    
    # Connect to SQLite database
    conn = sqlite3.connect("data/sessions.db")
    cursor = conn.cursor()
    
    # Create sessions table
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS sessions (
            id TEXT PRIMARY KEY,
            name TEXT NOT NULL,
            type TEXT NOT NULL,
            description TEXT,
            status TEXT NOT NULL,
            start_time TEXT NOT NULL,
            end_time TEXT,
            created TEXT NOT NULL,
            updated TEXT NOT NULL,
            file_count INTEGER NOT NULL,
            total_size INTEGER NOT NULL,
            metadata TEXT
        )
    """)
    
    # Create files table
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS files (
            id TEXT PRIMARY KEY,
            session_id TEXT NOT NULL,
            name TEXT NOT NULL,
            path TEXT NOT NULL,
            type TEXT NOT NULL,
            size INTEGER NOT NULL,
            created TEXT NOT NULL,
            modified TEXT NOT NULL,
            metadata TEXT,
            FOREIGN KEY (session_id) REFERENCES sessions (id)
        )
    """)
    
    # Generate sample sessions
    sessions = []
    for i in range(1, 16):  # Generate 15 sample sessions
        session = generate_sample_session(i)
        sessions.append(session)
        
        # Insert session
        cursor.execute("""
            INSERT OR REPLACE INTO sessions 
            (id, name, type, description, status, start_time, end_time, created, updated, file_count, total_size, metadata)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            session["id"],
            session["name"],
            session["type"],
            session["description"],
            session["status"],
            session["startTime"],
            session["endTime"],
            session["created"],
            session["updated"],
            session["fileCount"],
            session["totalSize"],
            json.dumps(session["metadata"])
        ))
        
        # Insert files
        for file_data in session["files"]:
            cursor.execute("""
                INSERT OR REPLACE INTO files 
                (id, session_id, name, path, type, size, created, modified, metadata)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                file_data["id"],
                session["id"],
                file_data["name"],
                file_data["path"],
                file_data["type"],
                file_data["size"],
                file_data["created"],
                file_data["modified"],
                json.dumps(file_data["metadata"])
            ))
    
    # Commit and close
    conn.commit()
    conn.close()
    
    print(f"‚úÖ Created sample database with {len(sessions)} sessions")
    print(f"üìÅ Database location: data/sessions.db")
    
    # Also create a JSON file for easy viewing
    with open("data/sample_sessions.json", "w") as f:
        json.dump(sessions, f, indent=2)
    
    print(f"üìÑ JSON export: data/sample_sessions.json")
    
    return sessions

def main():
    """Main function to generate sample data"""
    print("üîê Generating Sample Cybersecurity Workflow Sessions...")
    print("=" * 60)
    
    try:
        sessions = create_sample_database()
        
        print("\nüìä Sample Data Summary:")
        print(f"   ‚Ä¢ Total Sessions: {len(sessions)}")
        
        # Count files by type
        file_types = {}
        total_files = 0
        for session in sessions:
            total_files += session["fileCount"]
            for file_data in session["files"]:
                file_type = file_data["type"]
                file_types[file_type] = file_types.get(file_type, 0) + 1
        
        print(f"   ‚Ä¢ Total Files: {total_files}")
        print(f"   ‚Ä¢ File Types: {', '.join(f'{k}: {v}' for k, v in file_types.items())}")
        
        # Show session types
        session_types = {}
        for session in sessions:
            session_type = session["type"]
            session_types[session_type] = session_types.get(session_type, 0) + 1
        
        print(f"   ‚Ä¢ Session Types: {', '.join(f'{k}: {v}' for k, v in session_types.items())}")
        
        print("\nüéØ Sample Sessions Created:")
        for session in sessions[:5]:  # Show first 5
            print(f"   ‚Ä¢ {session['name']} ({session['type']}) - {session['fileCount']} files")
        
        if len(sessions) > 5:
            print(f"   ‚Ä¢ ... and {len(sessions) - 5} more sessions")
        
        print("\nüöÄ Next Steps:")
        print("   1. Start the session viewer: npm start")
        print("   2. Open http://localhost:3000 in your browser")
        print("   3. Explore the dashboard with real sample data!")
        
    except Exception as e:
        print(f"‚ùå Error generating sample data: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
